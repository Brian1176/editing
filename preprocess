#!/usr/bin/python

# This script is probably evil, but I am unspeakably sick of typing stuff like
# <span data-anolis-spec=domcore title=concept-element-namespace>namespace</span>.
# <var title> is also really pointless, although I should really get that fixed
# in Anolis proper.

replace = {
    'a': '<code data-anolis-spec=html title="the a element">a</code>',
    'ancestor': '<span data-anolis-spec=domcore title=concept-tree-ancestor>ancestor</span>',
    'attrlocalname': '<span data-anolis-spec=domcore title=concept-attr-local-name>local name</span>',
    'attrvalue': '<span data-anolis-spec=domcore title=concept-attr-value>value</span>',
    'b': '<code data-anolis-spec=html title="the b element">b</code>',
    'blockquote': '<code data-anolis-spec=html title="the blockquote element">blockquote</code>',
    'br': '<code data-anolis-spec=html title="the br element">br</code>',
    'boundarypoint': '<span data-anolis-spec=domrange title=concept-boundary-point>boundary point</span>',
    'bpnode': '<span data-anolis-spec=domrange title=concept-boundary-point-node>node</span>',
    'bpoffset': '<span data-anolis-spec=domrange title=concept-boundary-point-offset>offset</span>',
    'bpposition': '<span data-anolis-spec=domrange title=concept-bp-position>position</span>',
    'child': '<span data-anolis-spec=domcore title=concept-tree-child>child</span>',
    'children': '<span data-anolis-spec=domcore title=concept-tree-child>children</span>',
    'collection': '<span data-anolis-spec=domcore title=concept-collection>collection</span>',
    'contained': '<span data-anolis-spec=domrange>contained</span>',
    'comment': '<code data-anolis-spec=domcore>Comment</code>',
    'contextobject': '<span data-anolis-spec=domrange>context object</span>',
    'descendant': '<span data-anolis-spec=domcore title=concept-tree-descendant>descendant</span>',
    'directionality': '<span data-anolis-spec=html title="the directionality">directionality</span>',
    'div': '<code data-anolis-spec=html title="the div element">div</code>',
    'document': '<code data-anolis-spec=domcore>Document</code>',
    'documentfragment': '<code data-anolis-spec=domcore>DocumentFragment</code>',
    'element': '<code data-anolis-spec=domcore>Element</code>',
    'em': '<code data-anolis-spec=html title="the em element">em</code>',
    'font': '<code data-anolis-spec=html title=font>font</code>',
    'fontcolor': '<code data-anolis-spec=html title=dom-font-color>color</code>',
    'fontface': '<code data-anolis-spec=html title=dom-font-face>face</code>',
    'fontsize': '<code data-anolis-spec=html title=dom-font-size>size</code>',
    'getselection': '<code data-anolis-spec=domrange title=dom-Document-getSelection>getSelection()</code>',
    'htmlnamespace': '<span data-anolis-spec=domcore>HTML namespace</span>',
    'href': '<code data-anolis-spec=html title=attr-hyperlink-href>href</code>',
    'i': '<code data-anolis-spec=html title="the i element">i</code>',
    'index': '<span data-anolis-spec=domrange title=concept-indexof>index</span>',
    'li': '<code data-anolis-spec=html title="the li element">li</code>',
    'localname': '<span data-anolis-spec=domcore title=concept-element-local-name>local name</span>',
    'namespace': '<span data-anolis-spec=domcore title=concept-element-namespace>namespace</span>',
    'nextsibling': '<code data-anolis-spec=domcore title=dom-Node-nextSibling>nextSibling</code>',
    'node': '<span data-anolis-spec=domcore title=concept-node>node</span>',
    'nodelength': '<span data-anolis-spec=domrange title=concept-node-length>length</span>',
    'ol': '<code data-anolis-spec=html title="the ol element">ol</code>',
    'ownerdocument': '<code data-anolis-spec=domcore title=dom-Node-ownerDocument>ownerDocument</code>',
    'parent': '<span data-anolis-spec=domcore title=concept-tree-parent>parent</span>',
    'partiallycontained': '<span data-anolis-spec=domrange>partially contained</span>',
    'phrasingcontent': '<span data-anolis-spec=html>phrasing content</span>',
    'presentationalhint': '<span data-anolis-spec=html title="presentational hints">presentational hint</span>',
    'previoussibling': '<code data-anolis-spec=domcore title=dom-Node-previousSibling>previousSibling</code>',
    'processinginstruction': '<code data-anolis-spec=domcore>ProcessingInstruction</code>',
    'range': '<span data-anolis-spec=domrange title=concept-range>range</span>',
    'rangeend': '<span data-anolis-spec=domrange title=concept-range-end>end</span>',
    'rangemutationrules': '<span data-anolis-spec=domrange>range mutation rules</span>',
    'rangeroot': '<span data-anolis-spec=domrange title=concept-range-root>root</span>',
    'rangestart': '<span data-anolis-spec=domrange title=concept-range-start>start</span>',
    's': '<code data-anolis-spec=html title="the s element">s</code>',
    'selection': '<code data-anolis-spec=domrange>Selection</code>',
    'sibling': '<span data-anolis-spec=domcore title=concept-tree-sibling>sibling</span>',
    'span': '<code data-anolis-spec=html title="the span element">span</code>',
    'strike': '<code data-anolis-spec=html title="the strike element">strike</code>',
    'strong': '<code data-anolis-spec=html title="the strong element">strong</code>',
    'style': '<code data-anolis-spec=html title="the style attribute">style</code>',
    'sub': '<code data-anolis-spec=html title="the sub and sup elements">sub</code>',
    'sup': '<code data-anolis-spec=html title="the sub and sup elements">sup</code>',
    'text': '<code data-anolis-spec=domcore>Text</code>',
    'treeorder': '<span data-anolis-spec=domcore>tree order</span>',
    'u': '<code data-anolis-spec=html title="the u element">u</code>',
    'ul': '<code data-anolis-spec=html title="the ul element">ul</code>',
}

s = open("source.html", "r").read()
for key in replace:
    s = s.replace("[[" + key + "]]", replace[key])
    # Plurals
    s = s.replace("[[" + key + "s]]", replace[key].replace("</", "s</"))
    # Capitals
    capreplace = replace[key].split(">")
    capreplace[1] = capreplace[1].capitalize()
    capreplace = ">".join(capreplace)
    s = s.replace("[[" + key.capitalize() + "]]", capreplace)

if "[[" in s:
    raise Exception("Something mistyped?  " + s[s.find("[["):s.rfind("]]") + 2])

s = s.replace("<var>", "<var title>")

f = open("intermediate.html", "w")
f.write(s)
f.close()
# vim: set textwidth=0:
